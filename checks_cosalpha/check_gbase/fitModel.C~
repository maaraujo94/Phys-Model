/* code containing the class that does all the fit work
   - store data, parameters, fit results
   - run fit and plotting
   also contains the minuitFunction wrapper for the fit call */

//early declaraction of minuitFunction for the doFit call in the main class
void minuitFunction(int& nDim, double* gout, double& result, double par[], int flg);

#import "aux_func.C"

// class to use for fitting and plotting
// everything is public for easier debugging
class FitModel {
public:
  // PARAMETERS

  // only used before the fit

  // unc_method: the way to record cross-section uncertainty
  // read_flag: whether to read datafile
  // signorm: normalization applied on each dataset (y, BR effects)
  // statename: stores input files
  vector <int> unc_method;
  vector <bool> read_flag;
  vector <double> signorm;
  vector <string> statename;

  // determined pre-fit but used onwards

  // n_states: number of states in the fit
  // nparam: number of params of each type (norm, shape, nuis + fbeta)
  // n_pts: nr of data pts for each dataID
  // *_att: norm and nuis params to be multiplied to get value for each dataID
  // datasigma: storage of all (quantitative) info of each state
  // auxnames: strings needed for legends and savenames
  // state_id: map to determine which f_beta to use
  int n_states, nparam[4] = {0};
  vector <int> n_pts;
  vector <vector <int> > norm_att, nuis_att;
  vector <vector <double> > datasigma;
  vector <vector <string> > auxnames;
  map<int, string> state_id;

  // determined on fitting step

  // ndf: nr data points - nr free params
  // ptN: aux normalization pT/M
  // chisquare: chi^2 of the fit
  // fitresname: filename to store the fit results
  // (e)fitpar: results of the fit (param +/- e_param)
  // sigpar: pars in sig(pars)
  int ndf;
  double chisquare, ptN = 3, sqsN = 7000;
  string fitresname = "fit.txt";
  vector <double> fitpar, efitpar, sigpar;

  // only used inside csCalc to define fitting bins
  int nmin = 3, nmax = 8, ny = 4, npt, nsteps;
  double dpt, dy, dn = (double)(nmax-nmin) / 39.;

  // other quantities

  // maps between general state names and their masses and latex-formatted names
  map<string, double> QMass;
  map<string, string> QName;
  
  // vectors of each class to define each type of fit param
  vector <NormPar> norm;
  vector <ShapePar> shape;
  vector <NuisPar> nuis;

  // histogram of percent deviation and fitted + unfitted data pts
  TH1F *h_dev = new TH1F("h_dev", "Fit percentage deviation", 100, -50, 50);
  TH1F *h_pulls = new TH1F("h_pulls", "Fit pulls", 100, -5, 5);
  TH1F *h_devP = new TH1F("h_devP", "Fit percentage deviation (absolute value)", 50, 0, 50);
  TH1F *h_pullsP = new TH1F("h_pullsP", "Fit pulls (absolute value)", 50, 0, 5);
  TH2F *h_dp = new TH2F("h_dp", "Fit deviation vs pulls", 100, -3, 3, 100, -3, 3);
  vector <TH2F> h_dp_s;
  string det_name[4] = {"ATLAS", "CDF", "CMS", "LHCb"};
  TH2F **h_dp_d = new TH2F*[4];
  int n_fit = 0, n_unfit = 0;
  
  // FUNCTIONS
  
  // initializes the mass <-> state map
  void init() {
    const int nStates = 17;
  
    string StateNm[nStates] = { "jpsi", "chic0", "chic1", "chic2", "psi2", "ups1", "chib0_1P", "chib1_1P", "chib2_1P", "ups2", "chib0_2P", "chib1_2P", "chib2_2P", "ups3", "chib0_3P", "chib1_3P", "chib2_3P" };
    double M[nStates] = { 3.097, 3.415, 3.511, 3.556, 3.686, 9.460, 9.859,  9.893,    9.912,   10.023,  10.233,  10.255,  10.269,  10.355, 10.497,  10.512,    10.523 };
    string LatexNm[nStates] = { "J/#psi", "#chi_{c0}", "#chi_{c1}", "#chi_{c2}", "#psi(2S)", "#Upsilon(1S)", "#chi_{b0}(1P)", "#chi_{b1}(1P)", "#chi_{b2}(1P)", "#Upsilon(2S)", "#chi_{b0}(2P)", "#chi_{b1}(2P)", "#chi_{b2}(2P)", "#Upsilon(3S)", "#chi_{b0}(3P)", "#chi_{b1}(3P)", "#chi_{b2}(3P)" }; 
  
    for(int i = 0; i < nStates; i++) {
      QMass[StateNm[i]] = M[i];
      QName[StateNm[i]] = LatexNm[i];
    }
  }
  
  // method to store all filenames
  void getDataList(const char* input_list) {
    ifstream fin;
    string data;
    int iaux = 0;
    vector <string> aux;
    
    // open file and get number of lines
    fin.open(input_list);
    while(getline(fin, data)) iaux++;

    // set size for statename and n_pts, fix number of states
    statename.resize(iaux, "");
    n_pts.resize(iaux, 0);
    read_flag.resize(iaux, false);
    unc_method.resize(iaux, 0);
    signorm.resize(iaux, 1);
    n_states = iaux;
    
    // back to the start of the file
    fin.clear();
    fin.seekg(0);
    // for all lines, get stateid and file address
    // read parameter determines whether line is later read
    while(getline(fin, data)) {
      aux = parseString(data, "#");
      aux = parseString(aux[aux.size()-1], " ");
      iaux = stoi(aux[0]);    

      if(data.find("#") == string::npos) read_flag[iaux] = true;
	
      statename[iaux] = aux[1];
      unc_method[iaux] = stoi(aux[2]);
      aux = parseString(aux[3], "*");
      for(int i = 0; i < aux.size(); i++)
	signorm[iaux] *= stof(aux[i]);
    }
    fin.close();
  }
  
  //method to read data from each filename
  void getData() {
    string data;
    ifstream file;
    double nums[12];
    int i_state = 0;
    double aux, mass, sqrts;
    vector <string> saux;
    // can't do datasigma size at initialization bc class reads it as a method
    datasigma.resize(13);

    // vector of strings for legends and savenames
    auxnames.resize(3);

    // read and input all datafiles from statename
    for(int id = 0; id < n_states; id++) {
      saux = parseString(statename[id], "/");
      saux = parseString(saux[saux.size()-1], "_");

      // position code:
      /* [0] = detector, [1] = state, [2] = ybin  */
      auxnames[0].push_back(saux[0]);
      auxnames[1].push_back(saux[1]);
      auxnames[2].push_back(parseString(saux[saux.size()-1], ".")[0]);

      // fill the state <-> id map (for f_beta)
      if(id == 0) 
	state_id[i_state] = auxnames[1][id];
      else if(auxnames[1][id] != auxnames[1][id-1]) {
	i_state++;
	state_id[i_state] = auxnames[1][id];
      }
      
      // read each file, if flagged for reading
      if(read_flag[id]) file.open(statename[id]);
      if(file.is_open()) {
	saux = parseString(statename[id], "/");
	saux = parseString(saux[saux.size()-1], "_");
	mass = QMass[saux[1]];

	// getting sqrt(s) and possible decimals
	saux = parseString(saux[2], "p");
	sqrts = stof(saux[0])*1000;
	if(saux.size() > 1)
	  sqrts += stof(saux[1])*pow(10,3-saux[1].size());
	
	// get nr of pts for each stateid
	while(getline(file,data)) n_pts[id]+=1;

	file.clear();
	file.seekg(0);
	// save info for each stateid
	// position code:
	/* [0] = mass, [1] = yi, [2] = yf, [3] = pT/M, [4] = pTi/M, [5] = pTf/M
	   [6] = sigma*mass/norm, [7] = e(sigma), [8] = K(pol), [9] = sqrt(s)
	   [10] = stateid, [11] = Q state id for f_beta, [12] = xi cutoff	 */

	for(int j = 0; j < n_pts[id]; j++) {
	  for(int i = 0; i < 12; i++) {
	    file >> nums[i];
	  }
	  
	  // aux to correct unc: TODO should make the numbers here a variable to be read off somewhere
	  if(unc_method[id] == 1)
	    aux=nums[8]*nums[8]-1.8e-2*nums[5]*1.8e-2*nums[5];

	  datasigma[0].push_back(mass);
	  datasigma[1].push_back(nums[0]);
	  datasigma[2].push_back(nums[1]);
	  datasigma[3].push_back(nums[2]/mass);
	  datasigma[4].push_back(nums[3]/mass);
	  datasigma[5].push_back(nums[4]/mass);
	  datasigma[6].push_back(nums[5]*mass/signorm[id]);

	  //three ways to register uncertainty (see method variable)
	  if(unc_method[id] == 0)
	    datasigma[7].push_back(sqrt(nums[6]*nums[6]+nums[8]*nums[8])*mass/signorm[id]);
	  else if(unc_method[id] == 1)
	    datasigma[7].push_back(sqrt(nums[6]*nums[6]+aux)*mass/signorm[id]);
	  else if(unc_method[id] == 2)
	    datasigma[7].push_back(nums[6]*mass/signorm[id]);

	  datasigma[8].push_back(nums[10]/nums[11]-1);
	  datasigma[9].push_back(sqrts);
	  datasigma[10].push_back(id);
	  datasigma[11].push_back(i_state);
	  datasigma[12].push_back(ptmmin(auxnames[0][id], auxnames[1][id]));
	}
      }
      file.close();
    }
  }
  
  //method to read the types and initializations of each fit parameter from file
  void getParams(const char* param_list) {
    ifstream fin;
    string data;
    string names[3] = {"norm", "shape", "nuis"};
    vector <string> aux;
    
    // get nr of params for each of the 3 types
    fin.open(param_list);
    while(getline(fin, data)) {
      aux = parseString(data, " ");
      for(int i = 0; i < 3; i++) 
	if (names[i].compare(aux[0])==0) 
	  nparam[i]++;
    }
    nparam[3] = state_id.size();
    norm.resize(nparam[0]);
    shape.resize(nparam[1]); 
    nuis.resize(nparam[2]);

    fin.clear();
    fin.seekg(0);
    // for each type of par, register associated values
    // MAKE SURE PARAMETERS ARE ORDERED BY TYPE
    for(int i = 0; i < nparam[0]; i++)
      fin >> data >> norm[i].name >> norm[i].mult >> norm[i].fix;
    for(int i = 0; i < nparam[1]; i++)
      fin >> data >> shape[i].name >> shape[i].val >> shape[i].unc >> shape[i].fix;
    for(int i = 0; i < nparam[2]; i++) {
      fin >> data >> nuis[i].name >> data >> nuis[i].fix; 
      aux = parseString(data, "/");
      nuis[i].normunc = stof(aux[0]);
      if(aux.size() > 1) nuis[i].normunc /= stof(aux[1]);
    }
    fin.close();
  }

  // method to get which norm and nuis affect each state
  void getParMethod(const char* method_list) {
    norm_att.resize(n_states);
    nuis_att.resize(n_states);
    ifstream fin;
    int nnorm, nnuis, auxi;
    
    fin.open(method_list);
    for(int id = 0; id < n_states; id++) {
      fin >> auxi >> nnorm;
      norm_att[id].resize(nnorm);
      for(int n = 0; n < nnorm; n++)
	fin >> norm_att[id][n];
      fin >> nnuis;
      nuis_att[id].resize(nnuis);
      for(int n = 0; n < nnuis; n++)
	fin >> nuis_att[id][n];
    }
    fin.close();
  }

  // auxiliary function that calculates the cross section for a given data point
  double csCalc(int i) {
    dpt = datasigma[5][i]-datasigma[4][i];
    dy = datasigma[2][i]-datasigma[1][i];
    npt = nmin + int(0.5 + dn*(dpt*QMass["psip"]-1.));
    nsteps = npt*ny;

    double cs = 0.;
    for(int xpt = 0; xpt < npt; xpt++) {
      sigpar[1] = datasigma[4][i]+xpt*dpt/(npt-1.)+1e-10;
      for(int xy = 0; xy < ny; xy++) {
	sigpar[2] = datasigma[1][i]+xy*dy/(ny-1.);
	cs += sig_wrapper(sigpar);
      }
    }
    cs/=(nsteps);

    return cs;
  }
  
  // fit function
  double myFunction(double *par) {
    //first calculate const normalization
    int len = nparam[1] + 6;
    sigpar.resize(len);

    for(int i = 0; i < len; i++) {
      if(i < 6) sigpar[i] = 1;
      else sigpar[i] = par[i-6+nparam[0]];
    }

    double pred, chisq, sum = 0, ratio, lumibr;
    int counter = 0;

    // run over all pts and get chisquare
    for(int id = 0; id < n_states; id++) {
      //for each state calculate norm factor (product of L terms)
      sigpar[3] = 1.;
      for(int i = 0; i < norm_att[id].size(); i++){
	sigpar[3] *= par[norm_att[id][i]];
      }
      //for each state calculate lumi*br factor
      lumibr = 1.;
      for(int i = 0; i < nuis_att[id].size(); i++)
	lumibr *= par[nuis_att[id][i]+nparam[0]+nparam[1]];
      
      //for each state, assign sqrt(s)/M, M, fbeta
      sigpar[0] = datasigma[9][counter]/datasigma[0][counter];
      sigpar[4] = datasigma[0][counter];
      int setf = nparam[0]+nparam[1]+nparam[2];
      if(datasigma[11][counter] == 2)
	setf += 1;
      else setf += datasigma[11][counter];
      sigpar[5] = par[setf];

      //cycle over each point in the state
      for(int n = 0; n < n_pts[id]; n++)
	if(datasigma[4][n+counter] >= datasigma[12][n+counter]) {
	  //calculate cs prediction
	  pred = csCalc(n+counter);
	  
	  //ratio will be !=1 if we consider polarization
	  //lambda=0.;
	  //ratio=(1+1./3*datasigma[4][i])/(1+(1-lambda)/(3+lambda)*datasigma[4][i]);
	  ratio = 1.;
	  
	  chisq = ((pred - datasigma[6][n+counter]*ratio*lumibr)/(datasigma[7][n+counter]*ratio*lumibr))*((pred - datasigma[6][n+counter]*ratio*lumibr)/(datasigma[7][n+counter]*ratio*lumibr));
	  sum += chisq;
	}
      counter += n_pts[id];
    }

    // add factors for the nuisance parameters
    for(int i = 0; i < nparam[2]; i++) {
      chisq = ((par[i+nparam[0]+nparam[1]] - 1) / nuis[i].normunc) * ((par[i+nparam[0]+nparam[1]] - 1) / nuis[i].normunc);
      sum += chisq;
    }

    return sum;
  }

  //estimates initialization for L value
  double lest(string sName)
  {
    double min_dpt = 100;
    int min_i = 0;
    int lds = datasigma[0].size();

    for(int i = 0; i < lds; i++) {
      if(datasigma[9][i] == sqsN && auxnames[1][datasigma[10][i]].find(sName) == 0) {
	if(abs(datasigma[3][i] - ptN) < min_dpt) {
	  min_i = i;
	  min_dpt = abs(datasigma[3][i] - ptN);
	}
      }
    }
    return datasigma[6][min_i];
  }
  
  // method that initializes and runs the fitting
  void doFit() {
    int npartot = nparam[0]+nparam[1]+nparam[2]+nparam[3], aux_int = 0;
    char char_array[100];

    //define TFitter
    TFitter* fit = new TFitter(npartot);
    fit->SetFCN(minuitFunction);

    // initialize normalizations
    double L_est[nparam[0]];
    for(int i = 0; i < nparam[0]; i++) {
      if(i <= datasigma[11][datasigma[11].size()-1]) {
	string sName = parseString(norm[i].name, "_")[1];
	L_est[i] = lest(sName);
      }
      else
	L_est[i] = 1.;
    }

    // initialize norm parameters
    for(int i = 0; i < nparam[0]; i++) {
      strcpy(char_array, norm[i].name.c_str());
      fit->SetParameter(i, char_array, L_est[i]*norm[i].mult, L_est[i]*norm[i].mult/10, 0, 0);
      if(norm[i].fix == 1) {
	fit->SetParameter(i, char_array, 1, 0.1, 0, 0);
	fit->FixParameter(i);
      }
    }
    // initialize shape parameters
    for(int i = 0; i < nparam[1]; i++) {
      strcpy(char_array, shape[i].name.c_str());
      fit->SetParameter(i+nparam[0], char_array, shape[i].val, shape[i].unc, 0, 0);
      if(shape[i].fix == 1) fit->FixParameter(i+nparam[0]);
    }
    // initialize nuisance parameters
    aux_int = 0;
    for(int i = 0; i < nparam[2]; i++) {
      strcpy(char_array, nuis[i].name.c_str());
      fit->SetParameter(i+nparam[0]+nparam[1], char_array, 1, 0.1, 0, 0);
      if(nuis[i].fix == 1) fit->FixParameter(i+nparam[0]+nparam[1]);
      else aux_int++;
    }
    // initialize fbeta parameters
    for(int i = 0; i < nparam[3]; i++) {
      if(i < 4)
	fit->SetParameter(i+nparam[0]+nparam[1]+nparam[2], Form("fb_%s",  state_id[i].c_str()), 0.1, 0.05, 0, 0);
      else
	fit->SetParameter(i+nparam[0]+nparam[1]+nparam[2], Form("fb_%s",  state_id[i].c_str()), 0.3, 0.1, 0, 0);
      // fix f_beta for states that aren't included in the fit
      int lds = datasigma[0].size(), c_fix = 1;
      for(int i_ds = 0; i_ds < lds; i_ds++) {
	if(datasigma[11][i_ds] == i) {
	  c_fix = 0;
	  break;
	}
      }
      if(c_fix == 1) fit->FixParameter(i+nparam[0]+nparam[1]+nparam[2]);
      if(i == 2) fit->FixParameter(i+nparam[0]+nparam[1]+nparam[2]);
    }

    fit->ExecuteCommand("MIGRAD",0,0);
 
    fitpar.resize(npartot);
    efitpar.resize(npartot);
    for(int i = 0; i < npartot; i++) {
      fitpar[i] = fit->GetParameter(i);
      efitpar[i] = fit->GetParError(i);
    }
    fitpar[nparam[0]+nparam[1]+nparam[2]+2] = fitpar[nparam[0]+nparam[1]+nparam[2]+1];
    efitpar[nparam[0]+nparam[1]+nparam[2]+2] = efitpar[nparam[0]+nparam[1]+nparam[2]+1];

    double chipar[npartot];
    for(int i = 0; i < npartot; i++)
      chipar[i] = fitpar[i];
    chisquare = myFunction(chipar);
  
    ndf = 0;
    //calculating the number of data points used in the fit
    for(int i = 0; i < (int)datasigma[0].size(); i++)
      {
	if(datasigma[4][i] >= datasigma[12][i])
	  ndf += 1;
      }
    cout << ndf << " data points" << endl;
    //I am adding one degree of freedom for each of the nuisance parameters
    ndf += aux_int;
    //the final ndf is obtained by subtracting the number of free parameters
    ndf -= fit->GetNumberFreeParameters();
    cout << "ndf " << ndf << endl;
  
    cout << "chi^2 norm : " << chisquare/ndf  << endl;
    cout << "chi^2 prob : " << TMath::Prob(chisquare,ndf)  << endl;

    //store fit results for posterior plotting if desired
    ofstream fout;
    fout.open(fitresname);
    for(int i = 0; i < npartot; i++)
      fout << fit->GetParName(i) << "   e(" << fit->GetParName(i) << ")   ";
    fout << "chi2   ndf" << endl;
    for(int i = 0; i < npartot; i++)
      fout << fit->GetParameter(i) << "   " << fit->GetParError(i) << "   ";
    fout << chisquare << "   " << ndf << endl;
    fout.close();
  }

  void readRes() {
    ifstream fin;
    string data;
    int npartot = nparam[0]+nparam[1]+nparam[2]+nparam[3];

    // read fit results and fill (e)fitpar vectors
    fitpar.resize(npartot);
    efitpar.resize(npartot);
    
    fin.open(fitresname);
    getline(fin, data);
    for(int i = 0; i < npartot; i++)
      fin >> fitpar[i] >> efitpar[i];
    fin >> chisquare >> ndf;
    fin.close();

    fitpar[nparam[0]+nparam[1]+nparam[2]+2] = fitpar[nparam[0]+nparam[1]+nparam[2]+1];
    efitpar[nparam[0]+nparam[1]+nparam[2]+2] = efitpar[nparam[0]+nparam[1]+nparam[2]+1];

    double pred, chisq, sum = 0, ratio, lumibr;

    // resize sigpar and fill it appropriately
    int len = nparam[1] + 6;
    sigpar.resize(len);
    
    for(int i = 6; i < len; i++)
      sigpar[i] = fitpar[i-6+nparam[0]];
  }

  void plotempty(int nsets, int *sets) {
    string savename;

    double posif[4];

    vector <string> saux = parseString(statename[sets[0]], "/");
    saux = parseString(saux[saux.size()-1], "_"); 
    saux = parseString(saux[2], "p");
    double sqrts = stof(saux[0]);
    if(saux.size() > 1)
      sqrts += stof(saux[1])*pow(10,-saux[1].size());

    aRange(auxnames[0][sets[0]], auxnames[1][sets[0]], sqrts, posif);

    TCanvas *c = new TCanvas("title", "name", 700, 700);
    c->SetLogy();
    TH1F *fc = c->DrawFrame(posif[0], posif[1]*pow(10,-nsets), posif[2], posif[3]);
    fc->SetXTitle("p_{T}/M");
    fc->SetYTitle("d#sigma / d#xidy (nb/GeV)");
    fc->GetYaxis()->SetTitleOffset(1);
    c->Modified();
    c->SetTitle("");

    // text on the plot
    TLatex lc;
    double xpos = getPos(posif[0], posif[2], 0.625, 0);
    lc.SetTextSize(0.03);
    lc.DrawLatex(xpos, getPos(posif[3], posif[1], 0.5*(nsets+2)/8, 1), Form("#chi^{2}/ndf = %.0f/%d = %.1f", chisquare, ndf, chisquare/(double)ndf));
    //lc.DrawLatex(xpos, getPos(posif[3], posif[1], 0.5*(nsets+3)/8, 1), Form("P(#chi^{2},ndf) = %.1f%%", 100*TMath::Prob(chisquare, ndf)));
    xpos = getPos(posif[0], posif[2], 1./20, 0);
    lc.DrawLatex(xpos, getPos(posif[1], posif[3], 1./20, 1), Form("pp %.0f TeV",  sqrts));
    
    savename = "plots/"+auxnames[1][sets[0]]+"_"+Form("%.0f", sqrts)+"_"+auxnames[0][sets[0]]+"_cs.pdf";
    const char *st = savename.c_str();
    c->SaveAs(st);

    // redo plotting for pulls
    c->Clear();
    c->SetLogy(0);

    TH1F *fp = c->DrawFrame(posif[0], -9, posif[2], 9);
    fp->SetXTitle("p_{T}/M");
    fp->SetYTitle("pulls");
    fp->GetYaxis()->SetTitleOffset(1);
    c->Modified();
    c->SetTitle("");
   
    //plot line at zero
    TF1 *zero = new TF1("zero", "0", posif[0], posif[2]);
    zero->SetLineColor(kBlue);
    zero->SetLineStyle(7);
    zero->Draw("lsame");
    
    TLine *plim1 = new TLine(posif[0], -5, posif[2], -5);
    plim1->SetLineStyle(kDotted);
    plim1->Draw("lsame");
    TLine *plim2 = new TLine(posif[0], -3, posif[2], -3);
    plim2->SetLineStyle(kDotted);
    plim2->Draw("lsame");
    TLine *plim3 = new TLine(posif[0], 3, posif[2], 3);
    plim3->SetLineStyle(kDotted);
    plim3->Draw("lsame");
    TLine *plim4 = new TLine(posif[0], 5, posif[2], 5);
    plim4->SetLineStyle(kDotted);
    plim4->Draw("lsame");

    //text on the plot
    TLatex lp;
    lp.SetTextSize(0.03);
    lp.DrawLatex(xpos, getPos(10, -10, 1.5/20, 0), Form("#chi^{2}/ndf = %.0f/%d = %.1f", chisquare, ndf, chisquare/(double)ndf));
    //lp.DrawLatex(xpos, getPos(10, -10, 3./20, 0), Form("P(#chi^{2},ndf) = %.1f%%", 100*TMath::Prob(chisquare, ndf)));
    lp.DrawLatex(xpos, getPos(-10, 10, 1./20, 0), Form("pp %.0f TeV", sqrts));
    
    // save pulls plots
    savename = "plots/"+auxnames[1][sets[0]]+"_"+Form("%.0f", sqrts)+"_"+auxnames[0][sets[0]]+"_cs_pulls.pdf";
    const char* savep = savename.c_str();
    c->SaveAs(savep);
    
    c->Destructor();
  }
  
  //method that plots everything in each canvas
  void plotcanv(int nsets, int *sets) {
    int id, counter = 0, mkrStyle;
    double lumibr, cs;
    string savename;
    ofstream tex;
    
    // attribute axis range based on dataset
    double posif[4];
    
    //get point of datasigma where current datasets start
    for(int i = 0; i < sets[0]; i++) counter += n_pts[i];
    aRange(auxnames[0][sets[0]], auxnames[1][sets[0]], datasigma[9][counter], posif);

    // plotting starts here
    TCanvas *c = new TCanvas("title", "name", 700, 700);
    c->SetLogy();
    TH1F *fc = c->DrawFrame(posif[0], posif[1]*pow(10,-(nsets-1)), posif[2], posif[3]);
    fc->SetTitle(Form("%s %s", auxnames[0][sets[0]].c_str(), QName[auxnames[1][sets[0]]].c_str()));
    fc->SetXTitle("p_{T}/M");
    fc->SetYTitle("d#sigma / d#xidy (nb/GeV)");
    fc->GetYaxis()->SetTitleOffset(1);
    c->Modified();
    c->SetTitle("");

    // define data graphs and fit functions
    TGraphAsymmErrors **gd = new TGraphAsymmErrors*[nsets];
    TGraphAsymmErrors **gp = new TGraphAsymmErrors*[nsets];
    TGraphAsymmErrors **gdev = new TGraphAsymmErrors*[nsets];
    TF1 **f = new TF1*[nsets];

    tex.open("plots/chisquare.tex", std::ios_base::app);
    double chis = 0;
    int pts = 0;
    
    //cycle over all states
    for(int i_set = 0; i_set < nsets; i_set++) {
      id = sets[i_set];
      if(n_pts[id] > 0) {
	// get normalization and lumi*br factors
	sigpar[3] = 1.;
	for(int i = 0; i < norm_att[id].size(); i++)
	  sigpar[3] *= fitpar[norm_att[id][i]];
	lumibr = 1.;
	for(int i = 0; i < nuis_att[id].size(); i++)
	  lumibr *= fitpar[nuis_att[id][i]+nparam[0]+nparam[1]];

	// get sqrt(s) / M, MQQ and fbeta
	sigpar[0] = datasigma[9][counter]/datasigma[0][counter];
	sigpar[4] = datasigma[0][counter];
	sigpar[5] = fitpar[nparam[0]+nparam[1]+nparam[2]+(int)datasigma[11][counter]];

	float datapts[5][n_pts[id]];
	float pullpts[2][n_pts[id]];
	float devpts[2][n_pts[id]];
	
	// cycle over all points of [id]-state, to plot data and later pulls
	for(int j = 0; j < n_pts[id]; j++) {
	  // filling arrays for data plotting
	  datapts[0][j] = avgptm(datasigma[4][j+counter], datasigma[5][j+counter], datasigma[1][j+counter], datasigma[2][j+counter], sigpar, fitpar[nparam[0]+nparam[1]+nparam[2]+(int)datasigma[11][j+counter]]);
	  datapts[1][j] = datasigma[6][j+counter]*lumibr;
	  datapts[2][j] = datasigma[7][j+counter]*lumibr;
	  datapts[3][j] = datapts[0][j] - datasigma[4][j+counter];
	  datapts[4][j] = datasigma[5][j+counter] - datapts[0][j];
	  
	  // filling arrays for pulls plotting
	  cs = csCalc(j+counter);
	  pullpts[0][j] = (datapts[1][j] - cs) / datapts[2][j];
	  pullpts[1][j] = 0.;
	  devpts[0][j] = (datapts[1][j] - cs) / cs;
	  devpts[1][j] = 0.;
	  
	  if(datasigma[4][j+counter] > datasigma[12][j+counter]) {
	    h_dev->Fill(devpts[0][j]*100.);
	    h_pulls->Fill(pullpts[0][j]);
	    h_devP->Fill(abs(devpts[0][j])*100.);
	    h_pullsP->Fill(abs(pullpts[0][j]));
	    h_dp->Fill(devpts[0][j]*100./15., pullpts[0][j]);
	    h_dp_s[datasigma[11][j+counter]].Fill(devpts[0][j]*100./15., pullpts[0][j]);
	    for(int i_d = 0; i_d < 4; i_d++)
	      if(auxnames[0][id].find(det_name[i_d]) == 0)
		h_dp_d[i_d]->Fill(devpts[0][j]*100./15., pullpts[0][j]);
	    n_fit += 1;
	    chis += pow(pullpts[0][j],2);
	    pts += 1;
	  }
	  else n_unfit += 1;
	}
	  
	mkrStyle = getStyle(auxnames[0][id]);
	
	// data plots defined and drawn
	gd[i_set] = new TGraphAsymmErrors(n_pts[id], datapts[0], datapts[1], datapts[3], datapts[4], datapts[2], datapts[2]);
	gd[i_set]->SetLineColor(getCol(i_set));
	gd[i_set]->SetMarkerColor(getCol(i_set));
	gd[i_set]->SetMarkerStyle(mkrStyle);
	gd[i_set]->SetMarkerSize(.75);
	for(int i_pt = 0; i_pt < n_pts[id]; i_pt++) {
	  gd[i_set]->GetY()[i_pt] *= pow(10,-i_set);
	  gd[i_set]->GetEYhigh()[i_pt] *= pow(10,-i_set);	
	  gd[i_set]->GetEYlow()[i_pt] *= pow(10,-i_set);
	}
	gd[i_set]->Draw("P");
	
	// pulls plots defined (but not drawn)
	// all pts below ptmmin aren't drawn
	gp[i_set] = new TGraphAsymmErrors(n_pts[id], datapts[0], pullpts[0], datapts[3], datapts[4], pullpts[1], pullpts[1]);
	gp[i_set]->SetLineColor(getCol(i_set));
	gp[i_set]->SetMarkerColor(getCol(i_set));
	gp[i_set]->SetMarkerStyle(mkrStyle);
	gp[i_set]->SetMarkerSize(.75);
	
	gdev[i_set] = new TGraphAsymmErrors(n_pts[id], datapts[0], devpts[0], datapts[3], datapts[4], devpts[1], devpts[1]);
	gdev[i_set]->SetLineColor(getCol(i_set));
	gdev[i_set]->SetMarkerColor(getCol(i_set));
	gdev[i_set]->SetMarkerStyle(mkrStyle);
	gdev[i_set]->SetMarkerSize(.75);

	// fit model can't be made as flexible regarding param number
	// TODO think a bit abt how (if?) this could be improved
	f[i_set] = new TF1("cs fit", "[4]*sigplot([0], x, [1], [2], [3], [5], [7], [8]) + (1.-[4])*sigplot([0], x, [1], [2], [3], [6], [7], [8])", 0, 149.9);
	f[i_set]->SetParameter(0, sigpar[0]);
	f[i_set]->SetParameter(1, (datasigma[1][counter]+datasigma[2][counter])/2);
	for(int j = 2; j < 9; j++)
	  f[i_set]->SetParameter(j, sigpar[j+1]);
	f[i_set]->SetParameter(2, sigpar[3]*pow(10,-i_set)); // scaling the different curves
	f[i_set]->SetLineColor(getCol(i_set));
	f[i_set]->Draw("lsame");
	
	counter += n_pts[id];
      }
    }

    tex << setprecision(2) << fixed << datasigma[9][counter-1]/1000 << " TeV " << auxnames[0][id] << " " << auxnames[1][id]  << " & " <<  pts << " & " << setprecision(1) << fixed << chis << " & ";
    if(pts > 0) tex << chis/(double)pts;
    tex << " \\\\" << endl;

    // text on the plot
    TLatex lc;
    double xpos = getPos(posif[0], posif[2], 1./20, 0);
    lc.SetTextSize(0.03);
    lc.DrawLatex(xpos, getPos(posif[1]*pow(10,-(nsets-1)), posif[3], 0.15, 1), Form("#chi^{2}/ndf = %.0f/%d = %.1f", chisquare, ndf, chisquare/(double)ndf));
    lc.DrawLatex(xpos, getPos(posif[1]*pow(10,-(nsets-1)), posif[3], 0.05, 1), Form("pp %.0f TeV", datasigma[9][counter-1]/1000.));
    lc.DrawLatex(xpos, getPos(posif[1]*pow(10,-(nsets-1)), posif[3], 0.1, 1), Form("f_{#beta} = %.1f%%", sigpar[5]*100));

    // plot pt/M cutoff
    TLine *ptm_b = new TLine(datasigma[12][counter-1], posif[1]*pow(10,-(nsets-1)), datasigma[12][counter-1], posif[3]);
    ptm_b->SetLineStyle(7);
    ptm_b->Draw("lsame");

    // draw legend
    counter = 0;
    for(int i = 0; i < sets[0]; i++) counter += n_pts[i];
    
    double endpt = 0.85 - (double)nsets*0.05;  
    TLegend *leg = new TLegend(0.65, endpt, 0.9, 0.9);
    leg->SetTextSize(0.03);
    for(int i = 0; i < nsets; i++)  
      if (n_pts[sets[i]] > 0) {
	if ( auxnames[0][sets[0]] == "LHCb")
	  savename = Form("%.2f < y < %.2f", datasigma[1][counter], datasigma[2][counter]);
	else
	  savename = Form("%.2f < |y| < %.2f", datasigma[1][counter], datasigma[2][counter]);
	const char *st = savename.c_str();
	leg->AddEntry(gd[i], st, "pl");
	counter += n_pts[sets[i]];
      }
    leg->Draw();
    
    // save data plot
    savename = "plots/"+auxnames[1][sets[0]]+"_"+Form("%.0f", datasigma[9][counter-1]/1000.)+"_"+auxnames[0][sets[0]]+"_cs.pdf";
    const char *st = savename.c_str();
    c->SaveAs(st);
    
    // redo plotting for pulls
    c->Clear();
    c->SetLogy(0);
    
    TH1F *fp = c->DrawFrame(posif[0], -9, posif[2], 9);
    fp->SetTitle(Form("%s %s", auxnames[0][sets[0]].c_str(), QName[auxnames[1][sets[0]]].c_str()));
    fp->SetXTitle("p_{T}/M");
    fp->SetYTitle("pulls");
    fp->GetYaxis()->SetTitleOffset(1);
    c->Modified();
    c->SetTitle("");
    
    //plot line at zero
    TF1 *zero = new TF1("zero", "0", posif[0], posif[2]);
    zero->SetLineColor(kBlue);
    zero->SetLineStyle(7);
    zero->Draw("lsame");

    TLine *plim1 = new TLine(posif[0], -5, posif[2], -5);
    plim1->SetLineStyle(kDotted);
    plim1->Draw("lsame");
    TLine *plim2 = new TLine(posif[0], -3, posif[2], -3);
    plim2->SetLineStyle(kDotted);
    plim2->Draw("lsame");
    TLine *plim3 = new TLine(posif[0], 3, posif[2], 3);
    plim3->SetLineStyle(kDotted);
    plim3->Draw("lsame");
    TLine *plim4 = new TLine(posif[0], 5, posif[2], 5);
    plim4->SetLineStyle(kDotted);
    plim4->Draw("lsame");

    // plot pt/M cutoff
    TLine *ptm = new TLine(datasigma[12][counter-1], -9, datasigma[12][counter-1], 9);
    ptm->SetLineStyle(7);
    ptm->Draw("lsame");
  
    //draw pulls
    for(int i = 0; i < nsets; i++) {
      if( n_pts[sets[i]] > 0)
	gp[i]->Draw("P");
    }

    //text on the plot
    TLatex lp;
    lp.SetTextSize(0.03);
    lp.DrawLatex(xpos, getPos(9, -9, 1.5/20, 0), Form("#chi^{2}/ndf = %.0f/%d = %.1f", chisquare, ndf, chisquare/(double)ndf));
    lp.DrawLatex(xpos, getPos(-9, 9, 1./20, 0), Form("pp %.0f TeV", datasigma[9][counter-1]/1000.));
    lp.DrawLatex(xpos, getPos(9, -9, 3./20, 0), Form("f_{#beta} = %.1f%%", sigpar[5]*100.));

    //draw legend
    leg->Draw();
    
    //save pulls plot
    savename = "plots/"+auxnames[1][sets[0]]+"_"+Form("%.0f", datasigma[9][counter-1]/1000.)+"_"+auxnames[0][sets[0]]+"_cs_pulls.pdf";
    const char* savep = savename.c_str();
    c->SaveAs(savep);

    // redo plotting for relative deviation
    c->Clear();
    
    TH1F *fdev = c->DrawFrame(posif[0], -1., posif[2], 1.);
    fdev->SetTitle(Form("%s %s", auxnames[0][sets[0]].c_str(), QName[auxnames[1][sets[0]]].c_str()));
    fdev->SetXTitle("p_{T}/M");
    fdev->SetYTitle("rel. diff.");
    fdev->GetYaxis()->SetTitleOffset(1);
    c->Modified();
    c->SetTitle("");
    
    //plot line at zero
    zero->Draw("lsame");

    // plot pt/M cutoff
    TLine *ptmd = new TLine(datasigma[12][counter-1], -1, datasigma[12][counter-1], 1);
    ptmd->SetLineStyle(7);
    ptmd->Draw("lsame");
  
    //draw pulls
    for(int i = 0; i < nsets; i++) {
      if( n_pts[sets[i]] > 0)
	gdev[i]->Draw("P");
    }

    //text on the plot
    TLatex ld;
    ld.SetTextSize(0.03);
    ld.DrawLatex(xpos, getPos(1, -1, 1.5/20, 0), Form("#chi^{2}/ndf = %.0f/%d = %.1f", chisquare, ndf, chisquare/(double)ndf));
    ld.DrawLatex(xpos, getPos(-1, 1, 1./20, 0), Form("pp %.0f TeV", datasigma[9][counter-1]/1000.));
    ld.DrawLatex(xpos, getPos(1, -1, 3./20, 0), Form("f_{#beta} = %.1f%%", sigpar[5]*100));

    //draw legend
    leg->Draw();
    
    //save pulls plot
    savename = "plots/"+auxnames[1][sets[0]]+"_"+Form("%.0f", datasigma[9][counter-1]/1000.)+"_"+auxnames[0][sets[0]]+"_cs_devs.pdf";
    const char* saved = savename.c_str();
    c->SaveAs(saved);

    tex.close();
    
    c->Destructor();
  }

  // plotting the histogram of relative deviations - fit quality indicator
  void plotHist() {

    TCanvas *c = new TCanvas("title", "name", 700, 700);
    c->SetRightMargin(0.03);

    h_dev->GetXaxis()->SetTitle("deviation (%)");
    h_dev->GetYaxis()->SetTitle("Nr points");
    h_dev->GetYaxis()->SetTitleOffset(1.3);
    h_dev->Draw("histo");

    double xmax = h_dev->GetXaxis()->GetBinUpEdge(h_dev->GetNbinsX());
    double xmin = h_dev->GetXaxis()->GetBinLowEdge(1);
    double xpos = getPos(xmin, xmax, 0.05, 0);
    
    //text on the plot
    TLatex ld;
    ld.SetTextSize(0.03);
    ld.DrawLatex(xpos, getPos(h_dev->GetMinimum(), h_dev->GetMaximum(), 4.5/5., 0), Form("%d points fitted", n_fit));
    ld.DrawLatex(xpos, getPos(h_dev->GetMinimum(), h_dev->GetMaximum(), 4./5., 0), Form("%d points not fitted", n_unfit));

    c->SaveAs("plots/hist_dev.pdf");
    c->Clear();

    h_pulls->GetXaxis()->SetTitle("pulls");
    h_pulls->GetYaxis()->SetTitle("Nr points");
    h_pulls->GetYaxis()->SetTitleOffset(1.3);
    h_pulls->Draw("histo");

    xmax = h_pulls->GetXaxis()->GetBinUpEdge(h_pulls->GetNbinsX());
    xmin = h_pulls->GetXaxis()->GetBinLowEdge(1);
    xpos = getPos(xmin, xmax, 0.05, 0);
    
    //text on the plot
    TLatex lp;
    lp.SetTextSize(0.03);
    lp.DrawLatex(xpos, getPos(h_pulls->GetMinimum(), h_pulls->GetMaximum(), 4.5/5., 0), Form("%d points fitted", n_fit));
    lp.DrawLatex(xpos, getPos(h_pulls->GetMinimum(), h_pulls->GetMaximum(), 4./5., 0), Form("%d points not fitted", n_unfit));

    c->SaveAs("plots/hist_pulls.pdf");
    c->Clear();

    h_devP->GetXaxis()->SetTitle("|deviation| (%)");
    h_devP->GetYaxis()->SetTitle("Nr points");
    h_devP->GetYaxis()->SetTitleOffset(1.3);
    h_devP->Draw("histo");

    xmax = h_devP->GetXaxis()->GetBinUpEdge(h_devP->GetNbinsX());
    xmin = h_devP->GetXaxis()->GetBinLowEdge(1);
    xpos = getPos(xmin, xmax, 0.5, 0);
    
    //text on the plot
    TLatex ldP;
    ldP.SetTextSize(0.03);
    ldP.DrawLatex(xpos, getPos(h_devP->GetMinimum(), h_devP->GetMaximum(), 4.5/5., 0), Form("%d points fitted", n_fit));
    ldP.DrawLatex(xpos, getPos(h_devP->GetMinimum(), h_devP->GetMaximum(), 4./5., 0), Form("%d points not fitted", n_unfit));

    c->SaveAs("plots/hist_devP.pdf");
    c->Clear();

    h_pullsP->GetXaxis()->SetTitle("|pulls|");
    h_pullsP->GetYaxis()->SetTitle("Nr points");
    h_pullsP->GetYaxis()->SetTitleOffset(1.3);
    h_pullsP->Draw("histo");

    xmax = h_pullsP->GetXaxis()->GetBinUpEdge(h_pullsP->GetNbinsX());
    xmin = h_pullsP->GetXaxis()->GetBinLowEdge(1);
    xpos = getPos(xmin, xmax, 0.5, 0);
    
    //text on the plot
    TLatex lpP;
    lpP.SetTextSize(0.03);
    lpP.DrawLatex(xpos, getPos(h_pullsP->GetMinimum(), h_pullsP->GetMaximum(), 4.5/5., 0), Form("%d points fitted", n_fit));
    lpP.DrawLatex(xpos, getPos(h_pullsP->GetMinimum(), h_pullsP->GetMaximum(), 4./5., 0), Form("%d points not fitted", n_unfit));

    c->SaveAs("plots/hist_pullsP.pdf");
    c->Clear();

    c->SetRightMargin(0.1);

    h_dp->SetStats(0);
    h_dp->GetXaxis()->SetTitle("deviation / 15%");
    h_dp->GetYaxis()->SetTitle("pulls");
    h_dp->Draw("colz");

    c->SaveAs("plots/hist_dp.pdf");
    c->Clear();

    for(int i = 0; i < h_dp_s.size(); i++) {
      h_dp_s[i].GetXaxis()->SetTitle("deviation / 15%");
      h_dp_s[i].GetYaxis()->SetTitle("pulls");
      h_dp_s[i].Draw("colz");

      c->SaveAs(Form("plots/hist_dp_%s.pdf", state_id[i].c_str()));
      c->Clear();
    }

    for(int i = 0; i < 4; i++) {
      h_dp_d[i]->GetXaxis()->SetTitle("deviation / 15%");
      h_dp_d[i]->GetYaxis()->SetTitle("pulls");
      h_dp_d[i]->Draw("colz");

      c->SaveAs(Form("plots/hist_dp_%s.pdf", det_name[i].c_str()));
      c->Clear();
    }
    c->Destructor();

    TFile *outfile = new TFile("files/histoStore.root", "recreate");
    h_dev->Write();
    h_pulls->Write();
    h_dp->Write();
    for(int i = 0; i < h_dp_s.size(); i++)
      h_dp_s[i].Write();
    for(int i = 0; i < 4; i++)
      h_dp_d[i]->Write();
    outfile->Close();
  }
  
  //method that does the plotting
  void doPlot(const char* state_div) {
    gROOT->SetBatch();

    ifstream fin;
    ofstream tex;
    int nsets, nval;

    int npartot = nparam[0]+nparam[1]+nparam[2]+nparam[3];
    vector <string> names = {"L_{J/\\psi}",
			     "L_{\\chi_{c1}}",
			     "L_{\\chi_{c2}}",
			     "L_{\\psi(2S)}",
			     "L_{\\Upsilon(1S)}",
			     "L_{\\Upsilon(2S)}",
			     "L_{\\Upsilon(3S)}",
			     "L_{ATLAS,\\Upsilon}",
			     "\\beta_1",
			     "\\beta_2",
			     "\\rho",
			     "\\delta",
			     "BR(J/\\psi\\rightarrow\\mu^+\\mu^-)",
			     "BR(\\chi_{c1}\\rightarrow J/\\psi\\gamma)",
			     "BR(\\chi_{c2}\\rightarrow J/\\psi\\gamma)",
			     "BR(\\psi(2S)\\rightarrow\\mu^+\\mu^-)",
			     "BR(\\psi(2S)\\rightarrow J/\\psi\\pi^+\\pi^-)",
			     "\\mathcal L_{ATLAS,5.02}",
			     "\\mathcal L_{ATLAS,7}(c\\overline c)",
			     "\\mathcal L_{ATLAS,7}(b\\overline b)",
			     "\\mathcal L_{ATLAS,13}",
			     "\\mathcal L_{CDF,1.96}(J/\\psi)",
			     "\\mathcal L_{CDF,1.96}(\\psi(2S))",
			     "\\mathcal L_{CMS,5.02}",
			     "\\mathcal L_{CMS,7}",
			     "\\mathcal L_{CMS,13}",
			     "\\mathcal L_{LHCb,7}(J/\\psi)",
			     "\\mathcal L_{LHCb,7}",
			     "\\mathcal L_{LHCb,8}",
			     "\\mathcal L_{LHCb,13}",
			     "f_{\\beta=2,J/\\psi}",
			     "f_{\\beta=2,\\chi_{c1}}",
			     "f_{\\beta=2,\\chi_{c2}}",
			     "f_{\\beta=2,\\psi(2S)}",
			     "f_{\\beta=2,\\Upsilon(1S)}",
			     "f_{\\beta=2,\\Upsilon(2S)}",
			     "f_{\\beta=2,\\Upsilon(3S)}"};
    
    // make latex file with fit parameters
    tex.open("plots/fitp.tex");

    tex << "\\begin{table}[h!]" << endl;
    tex << "\\centering" << endl;
    tex << "\\begin{tabular}{c|c|c}" << endl;
    tex << "Parameter & Value & Uncertainty \\\\" << endl;
    tex << "\\hline" << endl;
    for(int i = 0; i < npartot; i++) {
      tex << "$" << names[i] << "$ & ";
      int p_norm = 1.; 
      if(efitpar[i] > 0 && efitpar[i] < 1)
	p_norm = ceil(-log10(efitpar[i]))+1;	
      tex << setprecision(p_norm) << fixed << fitpar[i] << " & ";
      if(efitpar[i] > 0) tex << efitpar[i];
      else tex << "fixed";
      if(i >= nparam[0]+nparam[1] && i < nparam[0]+nparam[1]+nparam[2] && efitpar[i] != 0) {
	tex << " (" <<  (fitpar[i]-1.)/nuis[i-nparam[0]-nparam[1]].normunc << " $\\sigma$)";
      }
      tex << " \\\\" << endl;
    }
    tex << "\\end{tabular}" << endl;
    tex << "\\caption{Fit parameters ($\\chi^2$ / ndf = " << setprecision(1) << fixed << chisquare << " / " << ndf << " = " << chisquare/ndf << ")}" << endl;
    tex << "\\end{table}" << endl;
    tex.close();

    // make latex file with fit chi2 contrib
    tex.open("plots/chisquare.tex");
    tex << "\\begin{table}[h!]" << endl;
    tex << "\\centering" << endl;
    tex << "\\begin{tabular}{c|c|c|c}" << endl;
    tex << "Dataset & Nr points & $\\chi^2$ contribution & $<\\chi^2>$ \\\\" << endl;
    tex << "\\hline" << endl;
    tex.close();

    // initialize the state- and exp-dependent histos
    h_dp_s.resize(state_id.size());
    for(int i = 0; i < state_id.size(); i++) {
      h_dp_s[i] = TH2F(Form("h_dp_s%d", i), Form("Fit deviation vs pulls (%s)", QName[state_id[i]].c_str()), 100, -3, 3, 100, -3, 3);
    }

    for(int i = 0; i < 4; i++) {
      h_dp_d[i] = new TH2F(Form("h_dp_d%d", i), Form("Fit deviation vs pulls (%s)", det_name[i].c_str()), 100, -3, 3, 100, -3, 3);
    }
    
    // cycle over each line of the plotting division file
    fin.open(state_div);
    while(1) {
      nval = 0;
      fin >> nsets;
      int sets[nsets];

      for(int i = 0; i < nsets; i++) {
	fin >> sets[i];
	nval += n_pts[sets[i]];
      }

      // plot only if there are no points in dataset being considered
      if(nval != 0)
	plotcanv(nsets, sets);
      else
	plotempty(nsets, sets);

      //break cycle when we get to the last dataset
      if(sets[nsets-1] == n_states-1)
	break;
    }
    fin.close();

    tex.open("plots/chisquare.tex", std::ios_base::app);
    tex << "\\hline" << endl;
    for(int i = nparam[0]+nparam[1]; i < npartot-nparam[3]; i++) {
      tex << "$" << names[i] << "$ &  &";
      if(efitpar[i] != 0) {
	tex << " " << setprecision(1) << fixed << pow((fitpar[i]-1.)/nuis[i-nparam[0]-nparam[1]].normunc, 2) << " &  \\\\" << endl;
      }
      else
	tex << " fixed & \\\\" << endl;
    }
    tex << "\\end{tabular}" << endl;
    tex << "\\caption{Contribution to fit $\\chi^2$ of each dataset}" << endl;
    tex << "\\end{table}" << endl;
    tex.close();

    plotHist();
  }
};

// initialization of fit model outside main so it can be accessed by the tfitter wrapper
FitModel fitclass;

//Minuit-specific "wrapping"
void minuitFunction(int& nDim, double* gout, double& result, double par[], int flg)
{
  result = fitclass.myFunction(par);
}
